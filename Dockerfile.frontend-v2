# syntax=docker/dockerfile:1.7-labs
# Based off of Next.js Docker example
# https://github.com/vercel/next.js/tree/canary/examples/with-docker
FROM node:20-alpine AS base

# Install dependencies only when needed
FROM base AS deps
# Check https://github.com/nodejs/docker-node/tree/b4117f9333da4138b03a546ec926ef50a31506c3#nodealpine to understand why libc6-compat might be needed.
RUN apk add --no-cache libc6-compat && apk update
WORKDIR /app
RUN npm install -g pnpm
ENV PNPM_HOME=/app/.pnpm
ENV PATH=$PNPM_HOME:$PATH

# Set up directory structure that matches the repo
WORKDIR /app/frontend-v2
# Copy package.json and lock file
COPY frontend-v2/package.json frontend-v2/pnpm-lock.yaml* ./
# Copy shared directory at the correct relative path
COPY shared /app/shared/
RUN pnpm i --frozen-lockfile

# Rebuild the source code only when needed
FROM base AS builder
WORKDIR /app
# Copy the shared directory
COPY shared ./shared/
# Copy frontend-v2 and its node_modules
WORKDIR /app/frontend-v2
COPY --exclude=node_modules --exclude=.next frontend-v2 ./
COPY --from=deps /app/frontend-v2/node_modules ./node_modules
RUN npm install -g pnpm
ENV PNPM_HOME=/app/.pnpm
ENV PATH=$PNPM_HOME:$PATH
RUN pnpm run build

# Production image, copy all the files and run next
FROM base AS runner
WORKDIR /app/frontend-v2
ENV NODE_ENV=production
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs
COPY --from=builder /app/frontend-v2/public ./public
# Automatically leverage output traces to reduce image size
# https://nextjs.org/docs/advanced-features/output-file-tracing
COPY --from=builder --chown=nextjs:nodejs /app/frontend-v2/.next/standalone /app/
COPY --from=builder --chown=nextjs:nodejs /app/frontend-v2/.next/static ./.next/static
USER nextjs
WORKDIR /app
EXPOSE 3000
ENV PORT=3000
# server.js is created by next build from the standalone output
# https://nextjs.org/docs/pages/api-reference/config/next-config-js/output
ENV HOSTNAME="0.0.0.0"
CMD ["node", "server.js"]